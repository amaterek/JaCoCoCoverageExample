plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.example.jacococoverage"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // https://github.com/android/android-test/issues/829
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    androidTestImplementation 'androidx.test:core-ktx:1.3.1-alpha02'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3-alpha02'
    androidTestImplementation 'androidx.test:runner:1.3.1-alpha02'
    androidTestImplementation 'androidx.test:rules:1.3.1-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0-alpha02'
    androidTestUtil 'androidx.test:orchestrator:1.3.1-alpha02'
}

jacoco {
    toolVersion = jacoco_version
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['connectedDebugAndroidTest']) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }
    onlyIf = { true }


    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/com/example/databinding/*',
            '**/com/example/generated/callback/*',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/di/module/*',
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*', /* filtering `sealed` and `data` classes */
            '**/*$Result$*.*'/* filtering `sealed` and `data` classes */
    ]

    sourceDirectories.from(files([
            "${project.projectDir}/src/main/java"
    ]))
    classDirectories.setFrom(files([
            fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter),
            fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    ]))
    executionData.from(fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/debugAndroidTest/connected/**/*.ec"
    ]))
}
